// Code generated by MockGen. DO NOT EDIT.
// Source: src/interfaces/game.go

// Package mockgen is a generated GoMock package.
package mockgen

import (
	reflect "reflect"

	structs "github.com/eduardoths/checkers-game/src/structs"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockGameUseCases is a mock of GameUseCases interface.
type MockGameUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockGameUseCasesMockRecorder
}

// MockGameUseCasesMockRecorder is the mock recorder for MockGameUseCases.
type MockGameUseCasesMockRecorder struct {
	mock *MockGameUseCases
}

// NewMockGameUseCases creates a new mock instance.
func NewMockGameUseCases(ctrl *gomock.Controller) *MockGameUseCases {
	mock := &MockGameUseCases{ctrl: ctrl}
	mock.recorder = &MockGameUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameUseCases) EXPECT() *MockGameUseCasesMockRecorder {
	return m.recorder
}

// Move mocks base method.
func (m *MockGameUseCases) Move(gameID uuid.UUID, from int, movements []int) (*structs.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", gameID, from, movements)
	ret0, _ := ret[0].(*structs.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Move indicates an expected call of Move.
func (mr *MockGameUseCasesMockRecorder) Move(gameID, from, movements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockGameUseCases)(nil).Move), gameID, from, movements)
}

// NewGame mocks base method.
func (m *MockGameUseCases) NewGame(playerOne, playerTwo *structs.Player) (*structs.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewGame", playerOne, playerTwo)
	ret0, _ := ret[0].(*structs.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewGame indicates an expected call of NewGame.
func (mr *MockGameUseCasesMockRecorder) NewGame(playerOne, playerTwo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewGame", reflect.TypeOf((*MockGameUseCases)(nil).NewGame), playerOne, playerTwo)
}

// MockGameRepository is a mock of GameRepository interface.
type MockGameRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGameRepositoryMockRecorder
}

// MockGameRepositoryMockRecorder is the mock recorder for MockGameRepository.
type MockGameRepositoryMockRecorder struct {
	mock *MockGameRepository
}

// NewMockGameRepository creates a new mock instance.
func NewMockGameRepository(ctrl *gomock.Controller) *MockGameRepository {
	mock := &MockGameRepository{ctrl: ctrl}
	mock.recorder = &MockGameRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameRepository) EXPECT() *MockGameRepositoryMockRecorder {
	return m.recorder
}

// FindGame mocks base method.
func (m *MockGameRepository) FindGame(id uuid.UUID) (*structs.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGame", id)
	ret0, _ := ret[0].(*structs.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGame indicates an expected call of FindGame.
func (mr *MockGameRepositoryMockRecorder) FindGame(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGame", reflect.TypeOf((*MockGameRepository)(nil).FindGame), id)
}

// SaveGame mocks base method.
func (m *MockGameRepository) SaveGame(game *structs.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGame indicates an expected call of SaveGame.
func (mr *MockGameRepositoryMockRecorder) SaveGame(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGame", reflect.TypeOf((*MockGameRepository)(nil).SaveGame), game)
}
